/**
 * Bot Exemplu Wailey-library
 * 
 * Un exemplu simplu de bot WhatsApp care utilizeazƒÉ Wailey-library
 * cu suport pentru conectare prin cod de pairing
 */

const { makeWASocket, DisconnectReason } = require('../lib');
const { useMultiFileAuthState } = require('../lib/Utils/use-multi-file-auth-state');
const fs = require('fs');
const readline = require('readline');
const pino = require('pino');

// CreƒÉm interfa»õa readline pentru terminal
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Func»õie pentru a pune √ÆntrebƒÉri √Æn terminal
const √ÆntreabƒÉ = (√Æntrebare) =>
  new Promise((resolve) => {
    rl.question(√Æntrebare, (rƒÉspuns) => resolve(rƒÉspuns.trim()));
  });

// Helper pentru delay
const a»ôteaptƒÉ = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Configura»õie global pentru bot
const comenziDisponibile = {
  'help': 'Afi»ôeazƒÉ lista de comenzi disponibile',
  'ping': 'VerificƒÉ dacƒÉ botul func»õioneazƒÉ',
  'echo': 'RepetƒÉ mesajul tƒÉu (ex: !echo Salut)',
  'info': 'Afi»ôeazƒÉ informa»õii despre bot',
  'time': 'Afi»ôeazƒÉ data »ôi ora curentƒÉ'
};

// Func»õie pentru a procesa comenzile
async function procesareComandƒÉ(sock, msg) {
  if (!msg.message) return;
  
  // Extragem textul mesajului
  const text = msg.message.conversation || 
               (msg.message.extendedTextMessage && msg.message.extendedTextMessage.text) || '';
  
  // VerificƒÉm dacƒÉ este o comandƒÉ (√Æncepe cu !)
  if (!text.startsWith('!')) return;
  
  // Extragem comanda »ôi argumentele
  const [comandƒÉ, ...argumente] = text.slice(1).split(' ');
  const chatId = msg.key.remoteJid;
  
  switch (comandƒÉ.toLowerCase()) {
    case 'help':
      let mesajAjutor = '*Comenzi disponibile:*\n\n';
      for (const [cmd, descriere] of Object.entries(comenziDisponibile)) {
        mesajAjutor += `!${cmd} - ${descriere}\n`;
      }
      await sock.sendMessage(chatId, { text: mesajAjutor });
      break;
      
    case 'ping':
      await sock.sendMessage(chatId, { text: 'Pong! üèì' });
      break;
      
    case 'echo':
      const mesajEcho = argumente.join(' ');
      if (mesajEcho) {
        await sock.sendMessage(chatId, { text: mesajEcho });
      } else {
        await sock.sendMessage(chatId, { text: 'Te rog sƒÉ furnizezi un mesaj pentru echo.\nExemplu: !echo Salut lume!' });
      }
      break;
      
    case 'info':
      const infoMesaj = `*Informa»õii Bot*\n\n` +
                        `Nume: Bot Wailey\n` +
                        `Versiune: 1.0.0\n` +
                        `BibliotecƒÉ: Wailey-library\n` +
                        `Timp de func»õionare: ${Math.floor(process.uptime())} secunde`;
      await sock.sendMessage(chatId, { text: infoMesaj });
      break;
      
    case 'time':
      const data = new Date();
      const dataMesaj = `Data »ôi ora curentƒÉ:\n${data.toLocaleString()}`;
      await sock.sendMessage(chatId, { text: dataMesaj });
      break;
      
    default:
      await sock.sendMessage(chatId, { 
        text: `ComandƒÉ necunoscutƒÉ: ${comandƒÉ}\nFolose»ôte !help pentru a vedea lista de comenzi disponibile.` 
      });
      break;
  }
}

// Func»õie principalƒÉ pentru bot
async function startBot() {
  console.log("====================================");
  console.log("Bot Exemplu Wailey-library");
  console.log("====================================");
  
  // CreƒÉm directorul pentru starea de autentificare
  const DIRECTOR_AUTH = './auth_info_bot';
  if (!fs.existsSync(DIRECTOR_AUTH)) {
    fs.mkdirSync(DIRECTOR_AUTH, { recursive: true });
  }
  
  // √éncƒÉrcƒÉm starea de autentificare
  console.log("√éncƒÉrcƒÉm starea de autentificare...");
  const { state, saveCreds } = await useMultiFileAuthState(DIRECTOR_AUTH);
  
  // CreƒÉm socketul WhatsApp
  console.log("Ini»õializƒÉm conexiunea WhatsApp...");
  const sock = makeWASocket({
    auth: state,
    logger: pino({ level: "silent" }),
    printQRInTerminal: true,
    browser: ['Wailey Bot', 'Chrome', '103.0.5060.114']
  });
  
  // VerificƒÉm dacƒÉ este nevoie de pairing
  if (!state.creds?.registered) {
    console.log("Acest dispozitiv nu este conectat la WhatsApp.");
    console.log("Alege»õi metoda de conectare:");
    console.log("1. Cod QR (scaneazƒÉ codul QR care va apƒÉrea)");
    console.log("2. Cod de pairing (introdu codul pe telefon)");
    
    const alegere = await √ÆntreabƒÉ("Alege»õi op»õiunea (1 sau 2): ");
    
    if (alegere === "2") {
      // DacƒÉ avem func»õia de pairing
      if (typeof sock.requestPairingCode === 'function') {
        const numƒÉrTelefon = await √ÆntreabƒÉ("Introduce»õi numƒÉrul de telefon cu prefixul »õƒÉrii (ex: 40711111111): ");
        
        console.log("SolicitƒÉm codul de pairing...");
        await a»ôteaptƒÉ(5000); // Delay pentru a se ini»õializa conexiunea
        
        try {
          const cod = await sock.requestPairingCode(numƒÉrTelefon);
          console.log("\n====================================");
          console.log(`üîë CODUL TƒÇU DE PAIRING ESTE: ${cod}`);
          console.log("====================================\n");
          console.log("Introdu acest cod √Æn aplica»õia WhatsApp:");
          console.log("1. Deschide WhatsApp pe telefonul tƒÉu");
          console.log("2. AcceseazƒÉ SetƒÉri > Dispozitive conectate > ConecteazƒÉ un dispozitiv");
          console.log("3. Introdu codul de 8 cifre afi»ôat mai sus");
        } catch (eroare) {
          console.error("‚ùå Eroare la solicitarea codului de pairing:", eroare);
          console.log("Te rugƒÉm sƒÉ √Æncerci metoda cu cod QR sau sƒÉ reporne»ôti aplica»õia.");
        }
      } else {
        console.log("‚ùå Func»õia pentru cod de pairing nu este disponibilƒÉ √Æn aceastƒÉ versiune.");
        console.log("Te rugƒÉm sƒÉ utilizezi metoda cu cod QR.");
      }
    } else {
      console.log("ScaneazƒÉ codul QR afi»ôat √Æn terminal pentru a te conecta.");
    }
    
    console.log("A»ôteptƒÉm conectarea la WhatsApp...");
  } else {
    console.log("‚úÖ Dispozitiv deja conectat la WhatsApp!");
  }
  
  // GestionƒÉm actualizƒÉrile de conexiune
  if (sock.ev && typeof sock.ev.on === 'function') {
    sock.ev.on('connection.update', async (update) => {
      if (!update) return;
      const { connection, lastDisconnect } = update;
      
      if (connection === 'close') {
        const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
        
        console.log("Conexiune √ÆnchisƒÉ din cauza:", lastDisconnect?.error?.message || "motiv necunoscut");
        
        if (shouldReconnect) {
          console.log("Reconectare...");
          await a»ôteaptƒÉ(5000);
          startBot();
        } else {
          console.log("Deconectat definitiv. Te rugƒÉm sƒÉ reporne»ôti botul manual.");
          process.exit(0);
        }
      } else if (connection === 'open') {
        console.log("\n‚úÖ Bot conectat cu succes la WhatsApp!");
        console.log("Botul este acum activ »ôi ascultƒÉ comenzi.");
        console.log("Comenzi disponibile: !help, !ping, !echo, !info, !time");
      }
    });
    
    // SalvƒÉm creden»õialele c√¢nd se actualizeazƒÉ
    sock.ev.on('creds.update', saveCreds);
    
    // AscultƒÉm pentru mesaje noi
    sock.ev.on('messages.upsert', async ({ messages }) => {
      for (const msg of messages) {
        // ProcesƒÉm doar mesajele primite (nu cele trimise de noi)
        if (!msg.key.fromMe) {
          try {
            await procesareComandƒÉ(sock, msg);
          } catch (eroare) {
            console.error("Eroare la procesarea comenzii:", eroare);
          }
        }
      }
    });
  } else {
    console.log("‚ö†Ô∏è Event handling is not available in this version");
  }
}

// Pornim botul
startBot();