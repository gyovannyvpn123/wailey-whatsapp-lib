/**
 * Exemplu complet de utilizare a codurilor de asociere √Æn WhatsApp
 * Acest script demonstreazƒÉ autentificarea at√¢t prin cod QR c√¢t »ôi prin cod de asociere
 * »ôi permite trimiterea de mesaje individuale sau √Æn lot din fi»ôiere text
 */

const { default: makeWASocket, useMultiFileAuthState, DisconnectReason, makeCacheableSignalKeyStore } = require('@whiskeysockets/baileys');
const pino = require('pino');
const readline = require('readline');
const fs = require('fs');

// Func»õii de validare »ôi formatare
function validatePhoneNumber(phoneNumber) {
    const phoneRegex = /^\d{10,15}$/;
    return phoneRegex.test(phoneNumber);
}

function formatPhoneNumber(phoneNumber) {
    // EliminƒÉm orice caracter non-numeric
    const cleaned = phoneNumber.replace(/\D/g, '');
    
    // AdƒÉugƒÉm prefixul + dacƒÉ nu existƒÉ
    if (!cleaned.startsWith('+')) {
        return '+' + cleaned;
    }
    
    return cleaned;
}

// Func»õii utilitate
function readTextFile(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            return fs.readFileSync(filePath, 'utf8').trim();
        }
    } catch (error) {
        console.error(`Eroare la citirea fi»ôierului ${filePath}:`, error.message);
    }
    return null;
}

function sleep(seconds) {
    return new Promise(resolve => setTimeout(resolve, seconds * 1000));
}

// Func»õia principalƒÉ
async function main() {
    // CreƒÉm interfa»õa readline
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    // Func»õie pentru a citi input de la utilizator
    const question = (query) => new Promise(resolve => rl.question(query, resolve));
    
    try {
        // SolicitƒÉm numƒÉrul de telefon
        const phoneNumber = await question('Introdu numƒÉrul tƒÉu de telefon (ex: 40712345678): ');
        
        if (!validatePhoneNumber(phoneNumber)) {
            console.error('NumƒÉr de telefon invalid. Te rog sƒÉ folose»ôti formatul interna»õional fƒÉrƒÉ +.');
            rl.close();
            return;
        }
        
        console.log(`\nUtilizare numƒÉr: ${phoneNumber}`);
        
        // CreƒÉm directorul de sesiune dacƒÉ nu existƒÉ
        const sessionFolder = `./session_${phoneNumber}`;
        if (!fs.existsSync(sessionFolder)) {
            fs.mkdirSync(sessionFolder, { recursive: true });
        }
        
        // Ob»õinem starea de autentificare
        const { state, saveCreds } = await useMultiFileAuthState(sessionFolder);
        
        // CreƒÉm socket-ul WhatsApp direct, fƒÉrƒÉ a folosi wailey-whatsapp-lib
        console.log('Ini»õializare client WhatsApp...');
        
        // CreƒÉm socketul cu configura»õiile optime
        const sock = makeWASocket({
            browser: ['Ubuntu', 'Chrome', '114.0.0'], // AceastƒÉ configura»õie este CRUCIALƒÇ pentru codurile de asociere
            printQRInTerminal: true, // Afi»ôƒÉm codul QR √Æn terminal pentru a permite autentificarea prin scanare
            auth: {
                creds: state.creds,
                keys: makeCacheableSignalKeyStore(state.keys, pino({ level: 'silent' }))
            },
            logger: pino({ level: 'warn' })
        });
        
        // AscultƒÉm pentru actualizƒÉri de creden»õiale
        sock.ev.on('creds.update', saveCreds);
        
        // Handler pentru actualizƒÉri de conexiune
        let qrDisplayed = false;
        let pairingRequested = false;
        
        sock.ev.on('connection.update', async (update) => {
            const { connection, lastDisconnect, qr } = update;
            
            if (qr && !qrDisplayed) {
                qrDisplayed = true;
                console.log('\n‚ñ∂Ô∏è COD QR disponibil pentru scanare!');
                console.log('Ai douƒÉ op»õiuni:');
                console.log('1Ô∏è‚É£ ScaneazƒÉ codul QR de mai sus cu aplica»õia WhatsApp (camera)');
                console.log('2Ô∏è‚É£ A»ôteaptƒÉ 10 secunde pentru a solicita un cod de asociere text');
                
                // SolicitƒÉm codul de asociere dupƒÉ o scurtƒÉ perioadƒÉ
                if (!pairingRequested) {
                    pairingRequested = true;
                    
                    // A»ôteptƒÉm pu»õin pentru a permite scanarea QR dacƒÉ utilizatorul preferƒÉ
                    await sleep(10);
                    
                    try {
                        const formattedNumber = formatPhoneNumber(phoneNumber);
                        console.log(`\nSolicit cod de asociere pentru: ${formattedNumber}`);
                        
                        // SolicitƒÉm codul de asociere
                        const code = await sock.requestPairingCode(formattedNumber);
                        
                        console.log('\nüì± COD DE ASOCIERE PRIMIT:', code);
                        console.log('Deschide WhatsApp pe telefonul tƒÉu:');
                        console.log('1Ô∏è‚É£ SetƒÉri > Dispozitive conectate > ConecteazƒÉ un dispozitiv');
                        console.log('2Ô∏è‚É£ La ecranul cu codul QR, apasƒÉ "ConecteazƒÉ cu numƒÉr"');
                        console.log(`3Ô∏è‚É£ Introdu codul: ${code}`);
                    } catch (pairingError) {
                        console.error('\n‚ùå Eroare la solicitarea codului de asociere:', pairingError.message);
                        
                        if (pairingError.message.includes('Precondition Required') || 
                            pairingError.message.includes('Connection Closed')) {
                            console.log('\n‚ö†Ô∏è WhatsApp cere scanarea codului QR pentru prima autentificare.');
                            console.log('‚ñ∂Ô∏è Te rog sƒÉ scanezi codul QR de mai sus cu telefonul.');
                        }
                    }
                }
            }
            
            if (connection === 'open') {
                console.log('\n‚úÖ Conectat cu succes la WhatsApp!');
                console.log('üì± Informa»õii cont:', sock.user.name || 'Cont WhatsApp');
                
                // Func»õia pentru trimiterea de mesaje
                async function promptForMessageSending() {
                    try {
                        console.log('\nüìù Op»õiuni pentru trimiterea mesajelor:');
                        console.log('1. Trimite un mesaj text');
                        console.log('2. Trimite mesaje din fi»ôier text');
                        console.log('3. Ie»ôire');
                        
                        const choice = await question('\nAlege o op»õiune (1-3): ');
                        
                        if (choice === '1') {
                            const recipient = await question('Introdu numƒÉrul destinatarului (ex: 40712345678): ');
                            
                            if (!validatePhoneNumber(recipient)) {
                                console.error('NumƒÉr de telefon invalid. Te rog sƒÉ folose»ôti formatul interna»õional fƒÉrƒÉ +.');
                                return promptForMessageSending();
                            }
                            
                            const message = await question('Introdu mesajul: ');
                            const formattedRecipient = formatPhoneNumber(recipient);
                            
                            await sock.sendMessage(formattedRecipient, { text: message });
                            console.log(`‚úÖ Mesaj trimis cƒÉtre ${formattedRecipient}`);
                            
                            return promptForMessageSending();
                        } else if (choice === '2') {
                            const filePath = await question('Introdu calea cƒÉtre fi»ôierul text cu mesaje: ');
                            const messageContent = readTextFile(filePath);
                            
                            if (!messageContent) {
                                console.error('Fi»ôierul specificat nu existƒÉ sau nu poate fi citit.');
                                return promptForMessageSending();
                            }
                            
                            const recipient = await question('Introdu numƒÉrul destinatarului (ex: 40712345678): ');
                            
                            if (!validatePhoneNumber(recipient)) {
                                console.error('NumƒÉr de telefon invalid. Te rog sƒÉ folose»ôti formatul interna»õional fƒÉrƒÉ +.');
                                return promptForMessageSending();
                            }
                            
                            const formattedRecipient = formatPhoneNumber(recipient);
                            
                            // Divizam mesajul √Æn linii »ôi trimitem fiecare linie
                            const lines = messageContent.split('\n').filter(line => line.trim() !== '');
                            
                            const delay = parseInt(await question('Introdu √Ænt√¢rzierea √Æntre mesaje (secunde): '));
                            
                            console.log(`\nSe trimit ${lines.length} mesaje cƒÉtre ${formattedRecipient} cu o √Ænt√¢rziere de ${delay} secunde...`);
                            
                            for (let i = 0; i < lines.length; i++) {
                                const line = lines[i];
                                await sock.sendMessage(formattedRecipient, { text: line });
                                console.log(`‚úÖ Mesaj ${i+1}/${lines.length} trimis: "${line.substring(0, 30)}${line.length > 30 ? '...' : ''}"`);
                                
                                if (i < lines.length - 1) {
                                    console.log(`‚è±Ô∏è A»ôteptare ${delay} secunde...`);
                                    await sleep(delay);
                                }
                            }
                            
                            console.log('‚úÖ Toate mesajele au fost trimise!');
                            return promptForMessageSending();
                        } else if (choice === '3') {
                            console.log('La revedere!');
                            sock.end();
                            rl.close();
                            process.exit(0);
                        } else {
                            console.log('Op»õiune invalidƒÉ. Te rog sƒÉ alegi 1, 2 sau 3.');
                            return promptForMessageSending();
                        }
                    } catch (error) {
                        console.error('Eroare la trimiterea mesajului:', error);
                        return promptForMessageSending();
                    }
                }
                
                // Pornim procesul de trimitere mesaje
                await promptForMessageSending();
            }
            
            if (connection === 'close') {
                const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
                
                if (shouldReconnect) {
                    console.log('Conexiune √ÆnchisƒÉ, se √ÆncearcƒÉ reconectarea...');
                } else {
                    console.log('Deconectat (logged out).');
                    rl.close();
                    process.exit(0);
                }
            }
        });
        
        // Afi»ôƒÉm instruc»õiuni pentru utilizator
        console.log('\nA»ôtept conexiunea... poate dura p√¢nƒÉ la 30 de secunde.');
        console.log('Vei vedea fie un cod QR pentru scanare, fie un cod de asociere pentru introducere manualƒÉ.');
        console.log('ApasƒÉ Ctrl+C pentru a anula oric√¢nd.');
        
    } catch (error) {
        console.error('Eroare generalƒÉ:', error);
        rl.close();
    }
}

// RulƒÉm func»õia principalƒÉ
main().catch(console.error);
